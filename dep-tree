#! /bin/bash
set -e

# dep-tree version 0.4.1
# Copyright: Frans Pop <elendil@planet.nl>, 2007
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.

# Usage: dep-tree [options] <package name>
#        dep-tree [-S] <package name> <dependency>

# In first case script produces a dot file for processing with 'dot'.
# Examples: dep-tree <package> > <package>.dot
#           dep-tree <package> | dot -Tpng -o <package>.png
#           dep-tree <package> | dot -Tps | kghostview -
#
# In second case it will list the dependency path(s) from the first
# to the second package.

# NOTES
# - Output looks OK in big lines, but needs verification in detail
# - Suggests are not recursed; doing a full tree would lead to insane trees
#   in almost all situations
# - Conflicts are not recursed; what would be the point

# TODO
# - the dependency patch usage needs testing and update; concentrated on
#   getting dependency tree (graph) correct
# - add "usage" function and --version and --help options
# - this code really needs a testsuite as regressions are many and subtle;
#   comparing the .dot output with expected should be trivial if a fixed
#   status database is used
# - rewrite in e.g. C++; existing 'apt-cache dotty' code can be used as
#   staring point
# - automatic limiting
# - automatically split graphs over multiple subgraphs (which dot will place
#   on separate pages)
# - Identify transitional packages

### INITIALIZATION ###

IFS_SV="$IFS"
NL="
"

with_alternatives=1
with_suggests=""
with_recommends=1
with_vconflicts=""
with_versions=1
do_rotate=""
do_condense=""

while true; do
	case "$1" in
	    "")
		break ;;
	    --no-alternatives)
		with_alternatives="" ;;
	    --no-recommends)
		with_recommends="" ;;
	    -S|--with-suggests)
		with_suggests=1 ;;
	    -VC|--versioned-conflicts)
		with_vconflicts=1 ;;
	    --no-versions)
		with_versions="" ;;
	    -r|--rotate)
		do_rotate="1" ;;
	    --condense)
		do_condense="1" ;;
	    -*)
		echo "unrecognized argument '$1'" >&2
		exit 1
		;;
	    *)
		if [ -z "$requested_package" ]; then
			requested_package=$1
		elif [ -z "$want_dep" ]; then
			want_dep=$1
		else
			echo "Error: invalid number of arguments" >&2
			exit 1
		fi
		;;
	esac
	shift
done

# Don't allow Suggests without Recommends
[ "$with_recommends" ] || with_suggests=""

if [ -z "$requested_package" ]; then
	echo "Error: invalid number of arguments" >&2
	exit 1
fi

# Lists to limit processing:
# - "skip" packages are completely ignored: nothing is displayed
# - "end" packages are displayed and marked as such, but we don't recurse
#   to determine their dependencies
package_skip="libc6,libgcc1,libstdc++6,zlib1g,libx11-6"

# Basic general packages
package_end="gnupg,procmail"
# Perl/Python
package_end="$package_end,perl,python,python-minimal,python2.4"
# Basic Debian packages & package management
package_end="$package_end,apt,dpkg,aptitude,debconf,ucf"
# Development
package_end="$package_end,gcc,c-compiler,subversion,tla,git,git-core,mercurial"
# X-org
package_end="$package_end,x11-common,xfonts-base,xbase-clients,xutils"
# Common desktop
package_end="$package_end,fontconfig,libfontconfig1,defoma,dbus,libfam0"
# KDE
package_end="$package_end,libqt-rnt,libqt3-mt,kdelibs4c2a,libarts1c2a,libkdepim1a,kdebase-kio-plugins,kdepim-kio-plugins,kdesktop,kcontrol,kaddressbook"
# Gnome
package_end="$package_end,libgtk2.0-0,gconf2"
# Tex
package_end="$package_end,tetex-base,tex-common,texlive,texlive-base-bin,texlive-latex-recommended,texlive-latex-extra,texlive-fonts-recommended"
# Various
package_end="$package_end,gs-common,hyperestraier"


### FUNCTIONS ###

grep_avail() {
	local package=$1
	local pinfo pr_by
	local fields="Pre-Depends,Depends,Recommends,Suggests,Provides,Conflicts"

	if pinfo="$(grep-available -XP $package -s $fields)"; then
		:
	elif pinfo="$(grep-aptavail -XP $package -s $fields)"; then
		:
	else
		# Is this a pseudo package?
		pr_by="$(echo $(grep-aptavail -n -F Provides -s Package --eregex "(^| )$package(,|$)") | \
			       sed "s/ /, /g")"
		pinfo="Provided-By: $pr_by"
	fi

	[ "$pinfo" ] || echo "Warning: no dependency info found about '$package'" >&2
	echo "$pinfo"
}

get_deps() {
	echo "$1" | grep "^$2:" | sed "s/^[^:]*: //"
}

# Convert dependency string a bit for easier parsing:
# - remove space after ","
# - remove space before and after "|"
# - add space after package name if not versioned
prep_deps() {
	echo "$@" | sed "s:, :,:g;s: | :|:g;s:\([^) ]\)\(,\||\|$\):\1 \2:g"
}

check_list() {
	local list
	eval list="\$package_$1"
	echo "$list" | grep -q "^$2$" || return $?
}

get_prior_OR_name () {
	local package=$1
	if ! check_list OR_seen "$package"; then
		echo "$OR_list" | grep -E "(:|,)$package(,|$)" | \
			head -n1 | cut -d: -f1
	fi
}

print_dot_header() {
	echo "digraph \"$requested_package\" {"
	[ "$do_rotate" ] || echo -e "\trankdir=LR;"
	[ -z "$do_condense" ] || echo -e "\tconcentrate=true;"
	echo -e "\tnode [shape=box];"
}
print_dot_footer() {
	echo "}"
}

print_dot_OR_header() {	
	local OR_name="$1"

	echo -e "\t$OR_name ["
	echo -e "\t\tshape = \"record\""
	echo -en "\t\tlabel = \""
}
print_dot_OR_footer() {
	echo -e "\"\n\t]"
}

print_dot_OR_main() {
	local dep_package="$1"
	local first=$2

	[ -z "$first" ] || echo -n " | "
	# Mark packages previously encountered
	if check_list skip "$dep_package"; then
		echo -n "<$dep_package> ($dep_package)"
	elif check_list end "$dep_package"; then
		echo -n "<$dep_package> \{$dep_package\}"
	elif check_list OR_seen "$dep_package"; then
		echo -n "<$dep_package> [$dep_package]"
	else
		echo -n "<$dep_package> $dep_package"
	fi
}

print_dot_dependency() {
	local package=$1
	local dep_package=$2
	local dep_type=$3
	local verdep=$4
	local opts=""
	local p_package p_dep_package prior_OR_name

	# Second or later dependency in alternatives: skip unless versioned (see also below)
	# TODO: make this work also if only some of the alternatives have versioned deps
	if [ "$OR_name" ] && ([ -z "$with_versions" ] || [ -z "$verdep" ]) && \
	   echo "$OR_list" | grep -Eq "$OR_name:.*,$dep_package(,|$)"; then
		return 0
	fi

	case $dep_type in
	    PD)	opts="${opts:+$opts,}color=purple,style=bold" ;;
	    D)	opts="${opts:+$opts,}color=blue" ;;
	    R)	: ;;
	    S)	opts="${opts:+$opts,}style=dotted" ;;
	    C)	opts="${opts:+$opts,}color=red" ;;
	esac

	# Always include versions for versioned conflicts
	if [ "$verdep" ]; then
		if [ "$with_versions" ] || [ "$dep_type" = C ]; then
			opts="${opts:+$opts,}label=\"$verdep\""
		fi
	fi
	[ -z "$opts" ] || opts=" [$opts]"

	p_package="${predep_OR_name:+\"$predep_OR_name\":}\"$package\""

	if [ "$OR_name" ]; then
		# Unless we show versioned dependencies, make the link to the alternatives
		# to the group (see also above)
		if [ -z "$with_versions" ] || [ -z "$verdep" ]; then
			p_dep_package="\"$OR_name\""
		else
			p_dep_package="${OR_name:+\"$OR_name\":}\"$dep_package\""
		fi
	else
		# Keep all dependencies on a package with the first alternative
		# For now unless package was previously encountered separately,
		# in which case we use square brackets in the labels (print_dot_OR_main)
		prior_OR_name="$(get_prior_OR_name $dep_package)"
		p_dep_package="${prior_OR_name:+\"$prior_OR_name\":}\"$dep_package\""
	fi

	echo -e "\t$p_package -> $p_dep_package$opts;"

	# How can "end" packages that are part of an OR be identified?
	# For now, marked by using braces in the labels (see print_dot_OR_main)
	if check_list end "$dep_package" && \
	   [ -z "$OR_name" ] && [ -z "$prior_OR_name" ] && \
	   ! check_list done "$dep_package"; then
		echo -e "\t\"$dep_package\" [shape = diamond];"
		package_done="$package_done$NL$dep_package"
	fi
}

process_deps() {
	local package=$1
	local deps=$2
	local dep_type=$3
	local dep_tree_in=$4
	local predep_OR_name=$5
	local IFS dep dep_or dep_package dep_tree verdep OR_pkgs first

	IFS=,
	for dep in $deps; do
		IFS="$IFS_SV"
		local OR_name="" # global for called functions!

		# Create alternative dependency "records" for dot graph
		if [ -z "$want_dep" ] && [ "$with_alternatives" ] && \
		   echo $dep | grep -q "|"; then
			# Check if we already have these (exact) alternatives
			OR_pkgs=""
			IFS="|"
			for dep_or in $dep; do
				IFS="$IFS_SV"

				dep_package=${dep_or%% *}
				OR_pkgs="${OR_pkgs:+$OR_pkgs,}$dep_package"
			done

			OR_name="$(echo "$OR_list" | grep ":$OR_pkgs$" | cut -d: -f1)"
			if [ -z "$OR_name" ]; then
				OR_cnt=$(($OR_cnt + 1))
				OR_name=alt$OR_cnt

				first=""
				print_dot_OR_header "$OR_name"
				for dep_package in $(echo $OR_pkgs | sed "s/,/ /g"); do
					# Has this dependency already been processed as
					# a separate package?
					if check_list done "$dep_package" && \
					   ! echo "$OR_list" | grep -Eq "(:|,)$dep_package(,|$)" && \
					   ! check_list OR_seen "$dep_package"; then
						package_OR_seen="$package_OR_seen$NL$dep_package"
					fi

					print_dot_OR_main "$dep_package" "$first"
					first=1
				done
				print_dot_OR_footer

				OR_list="$OR_list$OR_name:$OR_pkgs$NL"
			fi
		fi

		IFS="|"
		for dep_or in $dep; do
			IFS="$IFS_SV"
			dep_tree=$dep_tree_in

			dep_package=${dep_or%% *}
			verdep=${dep_or#* }

			dep_tree="$dep_tree -> $dep_package ($dep_type)"

			if [ -z "$want_dep" ]; then
				if check_list skip "$dep_package"; then
					continue
				elif [ "$dep_type" = C ] && \
				     [ -z "$with_vconflicts" ] && [ "$verdep" ]; then
					# Skip only unversioned conflicts
					continue
				fi
				print_dot_dependency $package $dep_package $dep_type "$verdep"
			elif [ "$dep_package" = "$want_dep" ]; then
				echo "$dep_tree"
				continue
			fi

			if check_list done "$dep_package" ||
			   ([ -z "$want_dep" ] &&
			    check_list end "$dep_package"); then
				:
			else
				# Recurse through dependencies, except for Suggests
				# and Conflicts
				case $dep_type in
				    S|C)
					if ! check_list done "$dep_package"; then
						package_leaf="$package_leaf$NL$dep_package"
					fi ;;
				    *)
					process_package $dep_package "$dep_tree" "$OR_name" "" ;;
				esac
			fi

			[ "$with_alternatives" ] || break
		done
	done
}

process_pseudo() {
	local package=$1
	local providers=$2
	local dep_tree=$3
	local predep_OR_name=$4
	local is_leaf="$5"
	local prior_OR_name p_package p_provider

	p_package="${predep_OR_name:+\"$predep_OR_name\":}\"$package\""

	# Print a dummy providing package if there are multiple; we could
	# possibly loop and display alternatives if there are not too many
	# alternative provides
	if echo "$providers" | grep -q ","; then
		echo -e "\t$p_package -> \"Pr-$package\" [dir=back,arrowtail=inv,color=green];"
		echo -e "\t\"Pr-$package\" [shape=point];"
	else
		provider=${providers%% *}

		prior_OR_name="$(get_prior_OR_name $provider)"
		p_provider="${prior_OR_name:+\"$prior_OR_name\":}\"$provider\""
		echo -e "\t$p_package -> $p_provider [dir=back,arrowtail=inv,color=green];"

		if check_list end "$provider" && \
		   [ -z "$prior_OR_name" ] && \
		   ! check_list done "$provider"; then
			echo -e "\t\"$provider\" [shape = diamond];"
			package_done="$package_done$NL$provider"
		fi

		# Recurse to get dependencies for providing package
		dep_tree="$dep_tree <- $provider"
		if ! check_list done "$provider" && [ -z "$is_leaf" ]; then
			process_package $provider "$dep_tree" "" ""
		fi
	fi

	# Green arrow sufficiently identifies pseudo package that is part of alternatives
	if [ -z "$predep_OR_name" ] || check_list OR_seen "$package"; then
		echo -e "\t\"$package\" [shape=octagon];"
	fi
}

process_package() {
	local package=$1
	local dep_tree="$2"
	local predep_OR_name="$3"
	local is_leaf="$4"
	local pinfo providers deps 

	#echo "Debug: Processing $package ${is_leaf:+(leaf)}" >&2

	pinfo="$(prep_deps "$(grep_avail $package)")"

	package_done="$package_done$NL$package"

	# Not sure if we should do this when determining dependency paths
	providers=$(get_deps "$pinfo" Provided-By)
	if [ -z "$want_dep" ] && [ "$providers" ]; then
		process_pseudo $package "$providers" "$dep_tree" "$predep_OR_name" "$is_leaf"
	fi

	[ -z "$is_leaf" ] || return 0

	deps=$(get_deps "$pinfo" Pre-Depends)
	process_deps $package "$deps" PD "$dep_tree" "$predep_OR_name"

	deps=$(get_deps "$pinfo" Depends)
	process_deps $package "$deps" D "$dep_tree" "$predep_OR_name"

	if [ "$with_recommends" ]; then
		deps=$(get_deps "$pinfo" Recommends)
		process_deps $package "$deps" R "$dep_tree" "$predep_OR_name"
	fi

	if [ "$with_suggests" ]; then
		deps=$(get_deps "$pinfo" Suggests)
		process_deps $package "$deps" S "$dep_tree" "$predep_OR_name"
	fi

	deps=$(get_deps "$pinfo" Conflicts)
	process_deps $package "$deps" C "$dep_tree" "$predep_OR_name"

	# TODO (?)
	#provides=$(get_deps "$pinfo" Provides)
	#[ -z "$provides" ] || echo "$package provides: $provides" >&2

	# For packages we did not yet recurse through, check if they are pseudo packages
	if [ -z "$dep_type" ]; then
		for dep_package in $package_leaf; do
			if ! check_list done "$dep_package"; then
				process_package $dep_package "" "" 1
			fi
		done
	fi
}

### MAINLINE ###

package_skip="$(echo $package_skip | sed "s/,/\n/g")"
package_end="$(echo $package_end | sed "s/,/\n/g")"
package_done=""
package_leaf=""
package_OR_seen=""
OR_cnt=0
OR_list=""

[ "$want_dep" ] || print_dot_header

process_package $requested_package "$requested_package" "" ""

[ "$want_dep" ] || print_dot_footer
